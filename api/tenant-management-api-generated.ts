/* tslint:disable */
/* eslint-disable */
/*
Visier Tenant Management APIs

Visier APIs for managing tenants

The version of the OpenAPI document: 22222222.99201.1200


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { BusinessLocationDTO } from '../models';
// @ts-ignore
import { CustomPropertyDTO } from '../models';
// @ts-ignore
import { HomeAnalysisByUserGroupDTO } from '../models';
// @ts-ignore
import { MaskMessage } from '../models';
// @ts-ignore
import { Status } from '../models';
// @ts-ignore
import { TenantManagementAPIGetResponseDTO } from '../models';
// @ts-ignore
import { TenantManagementAPIListResponseDTO } from '../models';
// @ts-ignore
import { TenantManagementAPIUpdateRequestDTO } from '../models';
// @ts-ignore
import { TenantManagementAPIUpdateResponseDTO } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * TenantManagementApi - axios parameter creator
 * @export
 */
export const TenantManagementApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Prior to processing and loading an analytic tenant\'s data files, you must provision, or create, that tenant. A  provisioned analytic tenant is automatically enabled. If the tenant\'s data is loaded after provisioning, that data  is immediately accessible by their users.   This API allows you to create an analytic tenant and identify the  applications assigned to the tenant. Visier organizes content under a set of modules.   Contact Visier Support to determine the list of modules allocated to you.   **Note:** API requests that contain **homeAnalysisId**, **homeAnalysisByUserGroup**, or **clickThroughLink** take  longer to run because they require publishing a project to production.
         * @summary Add an analytic tenant
         * @param {TenantManagementAPIUpdateRequestDTO} tenantManagementAPIUpdateRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTenant: async (tenantManagementAPIUpdateRequestDTO: TenantManagementAPIUpdateRequestDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenantManagementAPIUpdateRequestDTO' is not null or undefined
            assertParamExists('createTenant', 'tenantManagementAPIUpdateRequestDTO', tenantManagementAPIUpdateRequestDTO)
            const localVarPath = `/v2/admin/tenants`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "apikey", keyParamName: "apiKeyAuth", configuration })
            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            // authentication CookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "VisierASIDToken", configuration})
            // authentication OAuth2Auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Auth", [], configuration)
            // authentication OAuth2Auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Auth", [], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: tenantManagementAPIUpdateRequestDTO,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/admin/tenants',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(tenantManagementAPIUpdateRequestDTO, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this API to retrieve the full list of analytic tenants managed by you with their current states and the content  modules assigned to them, and all other relevant details for the tenants if requested.
         * @summary Retrieve a list of all analytic tenants
         * @param {MaskMessage} maskMessage 
         * @param {number} [limit] The maximum number of tenants to return. Default is 400.
         * @param {number} [start] The starting index of the first tenant to return. Default is 0.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTenants: async (maskMessage: MaskMessage, limit?: number, start?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'maskMessage' is not null or undefined
            assertParamExists('listTenants', 'maskMessage', maskMessage)
            const localVarPath = `/v2/admin/tenants`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "apikey", keyParamName: "apiKeyAuth", configuration })
            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            // authentication CookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "VisierASIDToken", configuration})
            // authentication OAuth2Auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Auth", [], configuration)
            // authentication OAuth2Auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Auth", [], configuration)
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (start !== undefined) {
                localVarQueryParameter['start'] = start;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: maskMessage,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/admin/tenants',
                httpMethod: 'GET'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(maskMessage, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this API to retrieve the details for a specified analytic tenant. Doing so allows you to see the current state  of the tenant, the content modules assigned to it, and all other relevant details for the tenant.
         * @summary Retrieve an analytic tenant\'s details
         * @param {string} tenantId The ID of the tenant to retrieve.
         * @param {MaskMessage} maskMessage 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tenantInfo: async (tenantId: string, maskMessage: MaskMessage, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenantId' is not null or undefined
            assertParamExists('tenantInfo', 'tenantId', tenantId)
            // verify required parameter 'maskMessage' is not null or undefined
            assertParamExists('tenantInfo', 'maskMessage', maskMessage)
            const localVarPath = `/v2/admin/tenants/{tenantId}`
                .replace(`{${"tenantId"}}`, encodeURIComponent(String(tenantId !== undefined ? tenantId : `-tenantId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "apikey", keyParamName: "apiKeyAuth", configuration })
            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            // authentication CookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "VisierASIDToken", configuration})
            // authentication OAuth2Auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Auth", [], configuration)
            // authentication OAuth2Auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Auth", [], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: maskMessage,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/admin/tenants/{tenantId}',
                httpMethod: 'GET'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(maskMessage, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * You may need to update analytic tenants as they grow and as your organization upgrades the content available to them.  You may also encounter a scenario where an analytic tenant transitions across different industries. To make updates  to your tenants, use this API.   * To ensure that the analytic tenant receives accurate benchmarks and predictive functionality, update their industry code in the Visier system.  * To programmatically assign the Home analysis that analytic tenants see at login, use this API to set the default Home analysis for a tenant and specific user groups of that tenant.   You can use this API to update any field on an analytic tenant, except tenantCode.   **Note:** API requests that contain **homeAnalysisId**, **homeAnalysisByUserGroup**, or **clickThroughLink** take  longer to run because they require publishing a project to production.
         * @summary Update an analytic tenant
         * @param {TenantManagementAPIUpdateRequestDTO} tenantManagementAPIUpdateRequestDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTenant: async (tenantManagementAPIUpdateRequestDTO: TenantManagementAPIUpdateRequestDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenantManagementAPIUpdateRequestDTO' is not null or undefined
            assertParamExists('updateTenant', 'tenantManagementAPIUpdateRequestDTO', tenantManagementAPIUpdateRequestDTO)
            const localVarPath = `/v2/admin/tenants/:tenantId`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "apikey", keyParamName: "apiKeyAuth", configuration })
            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            // authentication CookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "VisierASIDToken", configuration})
            // authentication OAuth2Auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Auth", [], configuration)
            // authentication OAuth2Auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Auth", [], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: tenantManagementAPIUpdateRequestDTO,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/admin/tenants/:tenantId',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(tenantManagementAPIUpdateRequestDTO, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TenantManagementApi - functional programming interface
 * @export
 */
export const TenantManagementApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TenantManagementApiAxiosParamCreator(configuration)
    return {
        /**
         * Prior to processing and loading an analytic tenant\'s data files, you must provision, or create, that tenant. A  provisioned analytic tenant is automatically enabled. If the tenant\'s data is loaded after provisioning, that data  is immediately accessible by their users.   This API allows you to create an analytic tenant and identify the  applications assigned to the tenant. Visier organizes content under a set of modules.   Contact Visier Support to determine the list of modules allocated to you.   **Note:** API requests that contain **homeAnalysisId**, **homeAnalysisByUserGroup**, or **clickThroughLink** take  longer to run because they require publishing a project to production.
         * @summary Add an analytic tenant
         * @param {TenantManagementApiCreateTenantRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createTenant(requestParameters: TenantManagementApiCreateTenantRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TenantManagementAPIUpdateResponseDTO>> {
            const tenantManagementAPIUpdateRequestDTO: TenantManagementAPIUpdateRequestDTO = {
                tenantCode: requestParameters.tenantCode,
                tenantDisplayName: requestParameters.tenantDisplayName,
                tenantShortName: requestParameters.tenantShortName,
                vanityUrlName: requestParameters.vanityUrlName,
                industryCode: requestParameters.industryCode,
                primaryBusinessLocation: requestParameters.primaryBusinessLocation,
                purchasedModules: requestParameters.purchasedModules,
                embeddableDomains: requestParameters.embeddableDomains,
                customProperties: requestParameters.customProperties,
                ssoInstanceIssuers: requestParameters.ssoInstanceIssuers,
                homeAnalysisId: requestParameters.homeAnalysisId,
                homeAnalysisByUserGroup: requestParameters.homeAnalysisByUserGroup,
                updateAction: requestParameters.updateAction,
                enabled: requestParameters.enabled,
                clickThroughLink: requestParameters.clickThroughLink
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createTenant(tenantManagementAPIUpdateRequestDTO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use this API to retrieve the full list of analytic tenants managed by you with their current states and the content  modules assigned to them, and all other relevant details for the tenants if requested.
         * @summary Retrieve a list of all analytic tenants
         * @param {TenantManagementApiListTenantsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listTenants(requestParameters: TenantManagementApiListTenantsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TenantManagementAPIListResponseDTO>> {
            const maskMessage: MaskMessage = {
                mask: requestParameters.mask
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.listTenants(maskMessage, requestParameters.limit, requestParameters.start, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use this API to retrieve the details for a specified analytic tenant. Doing so allows you to see the current state  of the tenant, the content modules assigned to it, and all other relevant details for the tenant.
         * @summary Retrieve an analytic tenant\'s details
         * @param {TenantManagementApiTenantInfoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tenantInfo(requestParameters: TenantManagementApiTenantInfoRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TenantManagementAPIGetResponseDTO>> {
            const maskMessage: MaskMessage = {
                mask: requestParameters.mask
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.tenantInfo(requestParameters.tenantId, maskMessage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * You may need to update analytic tenants as they grow and as your organization upgrades the content available to them.  You may also encounter a scenario where an analytic tenant transitions across different industries. To make updates  to your tenants, use this API.   * To ensure that the analytic tenant receives accurate benchmarks and predictive functionality, update their industry code in the Visier system.  * To programmatically assign the Home analysis that analytic tenants see at login, use this API to set the default Home analysis for a tenant and specific user groups of that tenant.   You can use this API to update any field on an analytic tenant, except tenantCode.   **Note:** API requests that contain **homeAnalysisId**, **homeAnalysisByUserGroup**, or **clickThroughLink** take  longer to run because they require publishing a project to production.
         * @summary Update an analytic tenant
         * @param {TenantManagementApiUpdateTenantRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateTenant(requestParameters: TenantManagementApiUpdateTenantRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TenantManagementAPIUpdateResponseDTO>> {
            const tenantManagementAPIUpdateRequestDTO: TenantManagementAPIUpdateRequestDTO = {
                tenantCode: requestParameters.tenantCode,
                tenantDisplayName: requestParameters.tenantDisplayName,
                tenantShortName: requestParameters.tenantShortName,
                vanityUrlName: requestParameters.vanityUrlName,
                industryCode: requestParameters.industryCode,
                primaryBusinessLocation: requestParameters.primaryBusinessLocation,
                purchasedModules: requestParameters.purchasedModules,
                embeddableDomains: requestParameters.embeddableDomains,
                customProperties: requestParameters.customProperties,
                ssoInstanceIssuers: requestParameters.ssoInstanceIssuers,
                homeAnalysisId: requestParameters.homeAnalysisId,
                homeAnalysisByUserGroup: requestParameters.homeAnalysisByUserGroup,
                updateAction: requestParameters.updateAction,
                enabled: requestParameters.enabled,
                clickThroughLink: requestParameters.clickThroughLink
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateTenant(tenantManagementAPIUpdateRequestDTO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TenantManagementApi - factory interface
 * @export
 */
export const TenantManagementApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TenantManagementApiFp(configuration)
    return {
        /**
         * Prior to processing and loading an analytic tenant\'s data files, you must provision, or create, that tenant. A  provisioned analytic tenant is automatically enabled. If the tenant\'s data is loaded after provisioning, that data  is immediately accessible by their users.   This API allows you to create an analytic tenant and identify the  applications assigned to the tenant. Visier organizes content under a set of modules.   Contact Visier Support to determine the list of modules allocated to you.   **Note:** API requests that contain **homeAnalysisId**, **homeAnalysisByUserGroup**, or **clickThroughLink** take  longer to run because they require publishing a project to production.
         * @summary Add an analytic tenant
         * @param {TenantManagementApiCreateTenantRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTenant(requestParameters: TenantManagementApiCreateTenantRequest, options?: AxiosRequestConfig): AxiosPromise<TenantManagementAPIUpdateResponseDTO> {
            return localVarFp.createTenant(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this API to retrieve the full list of analytic tenants managed by you with their current states and the content  modules assigned to them, and all other relevant details for the tenants if requested.
         * @summary Retrieve a list of all analytic tenants
         * @param {TenantManagementApiListTenantsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTenants(requestParameters: TenantManagementApiListTenantsRequest, options?: AxiosRequestConfig): AxiosPromise<TenantManagementAPIListResponseDTO> {
            return localVarFp.listTenants(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this API to retrieve the details for a specified analytic tenant. Doing so allows you to see the current state  of the tenant, the content modules assigned to it, and all other relevant details for the tenant.
         * @summary Retrieve an analytic tenant\'s details
         * @param {TenantManagementApiTenantInfoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tenantInfo(requestParameters: TenantManagementApiTenantInfoRequest, options?: AxiosRequestConfig): AxiosPromise<TenantManagementAPIGetResponseDTO> {
            return localVarFp.tenantInfo(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * You may need to update analytic tenants as they grow and as your organization upgrades the content available to them.  You may also encounter a scenario where an analytic tenant transitions across different industries. To make updates  to your tenants, use this API.   * To ensure that the analytic tenant receives accurate benchmarks and predictive functionality, update their industry code in the Visier system.  * To programmatically assign the Home analysis that analytic tenants see at login, use this API to set the default Home analysis for a tenant and specific user groups of that tenant.   You can use this API to update any field on an analytic tenant, except tenantCode.   **Note:** API requests that contain **homeAnalysisId**, **homeAnalysisByUserGroup**, or **clickThroughLink** take  longer to run because they require publishing a project to production.
         * @summary Update an analytic tenant
         * @param {TenantManagementApiUpdateTenantRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTenant(requestParameters: TenantManagementApiUpdateTenantRequest, options?: AxiosRequestConfig): AxiosPromise<TenantManagementAPIUpdateResponseDTO> {
            return localVarFp.updateTenant(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createTenant operation in TenantManagementApi.
 * @export
 * @interface TenantManagementApiCreateTenantRequest
 */
export type TenantManagementApiCreateTenantRequest = {
    
} & TenantManagementAPIUpdateRequestDTO

/**
 * Request parameters for listTenants operation in TenantManagementApi.
 * @export
 * @interface TenantManagementApiListTenantsRequest
 */
export type TenantManagementApiListTenantsRequest = {
    
    /**
    * The maximum number of tenants to return. Default is 400.
    * @type {number}
    * @memberof TenantManagementApiListTenants
    */
    readonly limit?: number
    
    /**
    * The starting index of the first tenant to return. Default is 0.
    * @type {number}
    * @memberof TenantManagementApiListTenants
    */
    readonly start?: number
    
} & MaskMessage

/**
 * Request parameters for tenantInfo operation in TenantManagementApi.
 * @export
 * @interface TenantManagementApiTenantInfoRequest
 */
export type TenantManagementApiTenantInfoRequest = {
    
    /**
    * The ID of the tenant to retrieve.
    * @type {string}
    * @memberof TenantManagementApiTenantInfo
    */
    readonly tenantId: string
    
} & MaskMessage

/**
 * Request parameters for updateTenant operation in TenantManagementApi.
 * @export
 * @interface TenantManagementApiUpdateTenantRequest
 */
export type TenantManagementApiUpdateTenantRequest = {
    
} & TenantManagementAPIUpdateRequestDTO

/**
 * TenantManagementApiGenerated - object-oriented interface
 * @export
 * @class TenantManagementApiGenerated
 * @extends {BaseAPI}
 */
export class TenantManagementApiGenerated extends BaseAPI {
    /**
     * Prior to processing and loading an analytic tenant\'s data files, you must provision, or create, that tenant. A  provisioned analytic tenant is automatically enabled. If the tenant\'s data is loaded after provisioning, that data  is immediately accessible by their users.   This API allows you to create an analytic tenant and identify the  applications assigned to the tenant. Visier organizes content under a set of modules.   Contact Visier Support to determine the list of modules allocated to you.   **Note:** API requests that contain **homeAnalysisId**, **homeAnalysisByUserGroup**, or **clickThroughLink** take  longer to run because they require publishing a project to production.
     * @summary Add an analytic tenant
     * @param {TenantManagementApiCreateTenantRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantManagementApiGenerated
     */
    public createTenant(requestParameters: TenantManagementApiCreateTenantRequest, options?: AxiosRequestConfig) {
        return TenantManagementApiFp(this.configuration).createTenant(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this API to retrieve the full list of analytic tenants managed by you with their current states and the content  modules assigned to them, and all other relevant details for the tenants if requested.
     * @summary Retrieve a list of all analytic tenants
     * @param {TenantManagementApiListTenantsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantManagementApiGenerated
     */
    public listTenants(requestParameters: TenantManagementApiListTenantsRequest, options?: AxiosRequestConfig) {
        return TenantManagementApiFp(this.configuration).listTenants(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this API to retrieve the details for a specified analytic tenant. Doing so allows you to see the current state  of the tenant, the content modules assigned to it, and all other relevant details for the tenant.
     * @summary Retrieve an analytic tenant\'s details
     * @param {TenantManagementApiTenantInfoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantManagementApiGenerated
     */
    public tenantInfo(requestParameters: TenantManagementApiTenantInfoRequest, options?: AxiosRequestConfig) {
        return TenantManagementApiFp(this.configuration).tenantInfo(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * You may need to update analytic tenants as they grow and as your organization upgrades the content available to them.  You may also encounter a scenario where an analytic tenant transitions across different industries. To make updates  to your tenants, use this API.   * To ensure that the analytic tenant receives accurate benchmarks and predictive functionality, update their industry code in the Visier system.  * To programmatically assign the Home analysis that analytic tenants see at login, use this API to set the default Home analysis for a tenant and specific user groups of that tenant.   You can use this API to update any field on an analytic tenant, except tenantCode.   **Note:** API requests that contain **homeAnalysisId**, **homeAnalysisByUserGroup**, or **clickThroughLink** take  longer to run because they require publishing a project to production.
     * @summary Update an analytic tenant
     * @param {TenantManagementApiUpdateTenantRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantManagementApiGenerated
     */
    public updateTenant(requestParameters: TenantManagementApiUpdateTenantRequest, options?: AxiosRequestConfig) {
        return TenantManagementApiFp(this.configuration).updateTenant(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
