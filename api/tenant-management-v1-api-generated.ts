/* tslint:disable */
/* eslint-disable */
/*
Visier Tenant Management APIs

Visier APIs for managing tenants

The version of the OpenAPI document: 22222222.99201.1200


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AllTenantsStatusAPIDTO } from '../models';
// @ts-ignore
import { CustomTenantPropertyDTO } from '../models';
// @ts-ignore
import { Status } from '../models';
// @ts-ignore
import { TenantDetailAPIDTO } from '../models';
// @ts-ignore
import { TenantPreviewEntriesSummaryDTO } from '../models';
// @ts-ignore
import { TenantPreviewEntriesSummaryListDTO } from '../models';
// @ts-ignore
import { TenantProvisionAPIDTO } from '../models';
// @ts-ignore
import { TenantStatusAPIDTO } from '../models';
// @ts-ignore
import { UpdateTenantModel } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * TenantManagementV1Api - axios parameter creator
 * @export
 */
export const TenantManagementV1ApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Prior to processing and loading an analytic tenant\'s data files, you must provision, or create, that tenant.  A provisioned analytic tenant is automatically enabled. If the tenant\'s data is loaded after provisioning, that  data is immediately accessible by their users.   This API allows you to create an analytic tenant and identify the applications assigned to the tenant. Visier  organizes content under a set of modules.   Contact Visier Support to determine the list of modules allocated to you.
         * @summary Add an analytic tenant
         * @param {TenantProvisionAPIDTO} tenantProvisionAPIDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addTenant: async (tenantProvisionAPIDTO: TenantProvisionAPIDTO, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenantProvisionAPIDTO' is not null or undefined
            assertParamExists('addTenant', 'tenantProvisionAPIDTO', tenantProvisionAPIDTO)
            const localVarPath = `/v1/admin/tenants`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "apikey", keyParamName: "apiKeyAuth", configuration })
            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            // authentication CookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "VisierASIDToken", configuration})
            // authentication OAuth2Auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Auth", [], configuration)
            // authentication OAuth2Auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Auth", [], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: tenantProvisionAPIDTO,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/admin/tenants',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(tenantProvisionAPIDTO, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Warning! Deprovisioning an analytic tenant is not reversible.  Before deprovisioning, you must disable an analytic tenant. For more information, see **`/v1/admin/tenants/:tenantId/disable`**.   This API removes an analytic tenant permanently from the Visier system. If you are unsure whether an analytic tenant  may be re-enabled on any of the Visier modules at any time, you may instead want to disable the analytic tenant.   If successful, the response returns the status \"Deprovisioned\". This indicates that the tenant is scheduled for  deprovisioning, which may take several days to complete.
         * @summary Deprovision an analytic tenant
         * @param {string} [tenantId] The ID of the tenant. For example, WFF_{XXX}~{YYY} where {XXX} is the administrating tenant code and {YYY}  is the analytic tenant code.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTenant: async (tenantId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/admin/tenants/:tenantId`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "apikey", keyParamName: "apiKeyAuth", configuration })
            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            // authentication CookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "VisierASIDToken", configuration})
            // authentication OAuth2Auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Auth", [], configuration)
            // authentication OAuth2Auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Auth", [], configuration)
            if (tenantId !== undefined) {
                localVarQueryParameter['tenantId'] = tenantId;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/admin/tenants/:tenantId',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this API to disable an analytic tenant and remove access to Visier visualizations for the tenant\'s users.   You must disable an analytic tenant before deprovisioning, or removing, it from the system.
         * @summary Disable an analytic tenant
         * @param {string} [tenantId] The ID of the tenant. For example, WFF_{XXX}~{YYY} where {XXX} is the administrating tenant code and {YYY}  is the analytic tenant code.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        disableTenant: async (tenantId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/admin/tenants/:tenantId/disable`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "apikey", keyParamName: "apiKeyAuth", configuration })
            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            // authentication CookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "VisierASIDToken", configuration})
            // authentication OAuth2Auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Auth", [], configuration)
            // authentication OAuth2Auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Auth", [], configuration)
            if (tenantId !== undefined) {
                localVarQueryParameter['tenantId'] = tenantId;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/admin/tenants/:tenantId/disable',
                httpMethod: 'PUT'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * An analytic tenant is enabled when you provision or create the tenant.   Use this API to enable a tenant that you have specifically disabled; for example, if you previously did not  want that tenant to have access to Visier visualizations, but now do.
         * @summary Enable an analytic tenant
         * @param {string} [tenantId] The ID of the tenant. For example, WFF_{XXX}~{YYY} where {XXX} is the administrating tenant code and {YYY}  is the analytic tenant code.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        enableTenant: async (tenantId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/admin/tenants/:tenantId/enable`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "apikey", keyParamName: "apiKeyAuth", configuration })
            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            // authentication CookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "VisierASIDToken", configuration})
            // authentication OAuth2Auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Auth", [], configuration)
            // authentication OAuth2Auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Auth", [], configuration)
            if (tenantId !== undefined) {
                localVarQueryParameter['tenantId'] = tenantId;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/admin/tenants/:tenantId/enable',
                httpMethod: 'PUT'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this API to retrieve all details for a specified analytic tenant. Doing so allows you to see the current state  of the tenant, the content modules assigned to it, and all other relevant details for the tenant.
         * @summary Retrieve an analytic tenant\'s details
         * @param {string} [tenantId] The ID of the tenant. For example, WFF_{XXX}~{YYY} where {XXX} is the administrating tenant code and {YYY}  is the analytic tenant code.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTenant: async (tenantId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/admin/tenants/:tenantId`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "apikey", keyParamName: "apiKeyAuth", configuration })
            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            // authentication CookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "VisierASIDToken", configuration})
            // authentication OAuth2Auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Auth", [], configuration)
            // authentication OAuth2Auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Auth", [], configuration)
            if (tenantId !== undefined) {
                localVarQueryParameter['tenantId'] = tenantId;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/admin/tenants/:tenantId',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this API to retrieve the full list of analytic tenants managed by you with their current states and the  content modules assigned to them, and all other relevant details for the tenants if requested.
         * @summary Retrieve a list of all analytic tenants
         * @param {number} [limit] The limit of analytic tenant details to retrieve.
         * @param {number} [start] The index to start retrieving results from, also known as offset. The index begins at 0.
         * @param {boolean} [details] If true, the response returns information about the data version and modules.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTenants: async (limit?: number, start?: number, details?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/admin/tenants`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "apikey", keyParamName: "apiKeyAuth", configuration })
            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            // authentication CookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "VisierASIDToken", configuration})
            // authentication OAuth2Auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Auth", [], configuration)
            // authentication OAuth2Auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Auth", [], configuration)
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (start !== undefined) {
                localVarQueryParameter['start'] = start;
            }

            if (details !== undefined) {
                localVarQueryParameter['details'] = details;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/admin/tenants',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * You may need to update analytic tenants as they grow and as your organization upgrades the content available to  them. You may also encounter a scenario where an analytic tenant transitions across different industries.   To ensure that the analytic tenant receives accurate benchmarks and predictive functionality, update their  industry code in the Visier system.   You can use this API to update any field on an analytic tenant, except tenantCode.
         * @summary Update an analytic tenant
         * @param {UpdateTenantModel} updateTenantModel 
         * @param {string} [tenantId] The ID of the tenant to update.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTenant: async (updateTenantModel: UpdateTenantModel, tenantId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'updateTenantModel' is not null or undefined
            assertParamExists('updateTenant', 'updateTenantModel', updateTenantModel)
            const localVarPath = `/v1/admin/tenants/:tenantId`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "apikey", keyParamName: "apiKeyAuth", configuration })
            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            // authentication CookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "VisierASIDToken", configuration})
            // authentication OAuth2Auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Auth", [], configuration)
            // authentication OAuth2Auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Auth", [], configuration)
            if (tenantId !== undefined) {
                localVarQueryParameter['tenantId'] = tenantId;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: updateTenantModel,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/admin/tenants/:tenantId',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(updateTenantModel, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this API to retrieve the metric values for an individual analytic tenant. The metric values included in the  response are the tenant\'s configured summary metrics. Administrators can configure summary metrics in a project:  - Sign in to Visier as an administrator.  - In a project, on the navigation bar, click the Home button.  - Click Dashboard, and then click Edit Summary Metrics.  - Select the metrics that you want to validate, and then close the Summary Metrics dialog.  - Publish the project to production.
         * @summary Validate an analytic tenant\'s metric values
         * @param {string} [tenantId] The ID of the tenant. For example, WFF_{XXX}~{YYY} where {XXX} is the administrating tenant code and {YYY}  is the analytic tenant code.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validateTenant: async (tenantId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/op/validation/tenants/:tenantId`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "apikey", keyParamName: "apiKeyAuth", configuration })
            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            // authentication CookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "VisierASIDToken", configuration})
            // authentication OAuth2Auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Auth", [], configuration)
            // authentication OAuth2Auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Auth", [], configuration)
            if (tenantId !== undefined) {
                localVarQueryParameter['tenantId'] = tenantId;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/op/validation/tenants/:tenantId',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * As you onboard more analytic tenants, you can validate the data visible to your users to ensure it matches the  source systems from which it was exported and that it matches what your expectations are for this data.   The metric values included in the response are the tenant\'s configured summary metrics. Administrators can  configure summary metrics in a project:  - Sign in to Visier as an administrator.  - In a project, on the navigation bar, click the Home button.  - Click Dashboard, and then click Edit Summary Metrics.  - Select the metrics that you want to validate, and then close the Summary Metrics dialog.  - Publish the project to production.
         * @summary Validate metric values for all analytic tenants
         * @param {number} [limit] The limit of analytic tenant details to retrieve.
         * @param {number} [start] The index to start retrieving results from, also known as offset. The index begins at 0.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validateTenants: async (limit?: number, start?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/op/validation/tenants`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "apikey", keyParamName: "apiKeyAuth", configuration })
            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            // authentication CookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "VisierASIDToken", configuration})
            // authentication OAuth2Auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Auth", [], configuration)
            // authentication OAuth2Auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Auth", [], configuration)
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (start !== undefined) {
                localVarQueryParameter['start'] = start;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/op/validation/tenants',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TenantManagementV1Api - functional programming interface
 * @export
 */
export const TenantManagementV1ApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TenantManagementV1ApiAxiosParamCreator(configuration)
    return {
        /**
         * Prior to processing and loading an analytic tenant\'s data files, you must provision, or create, that tenant.  A provisioned analytic tenant is automatically enabled. If the tenant\'s data is loaded after provisioning, that  data is immediately accessible by their users.   This API allows you to create an analytic tenant and identify the applications assigned to the tenant. Visier  organizes content under a set of modules.   Contact Visier Support to determine the list of modules allocated to you.
         * @summary Add an analytic tenant
         * @param {TenantManagementV1ApiAddTenantRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addTenant(requestParameters: TenantManagementV1ApiAddTenantRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TenantProvisionAPIDTO>> {
            const tenantProvisionAPIDTO: TenantProvisionAPIDTO = {
                tenantCode: requestParameters.tenantCode,
                tenantDisplayName: requestParameters.tenantDisplayName,
                purchasedModules: requestParameters.purchasedModules,
                industryCode: requestParameters.industryCode,
                embeddableDomains: requestParameters.embeddableDomains,
                customProperties: requestParameters.customProperties,
                ssoInstanceIssuers: requestParameters.ssoInstanceIssuers
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addTenant(tenantProvisionAPIDTO, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Warning! Deprovisioning an analytic tenant is not reversible.  Before deprovisioning, you must disable an analytic tenant. For more information, see **`/v1/admin/tenants/:tenantId/disable`**.   This API removes an analytic tenant permanently from the Visier system. If you are unsure whether an analytic tenant  may be re-enabled on any of the Visier modules at any time, you may instead want to disable the analytic tenant.   If successful, the response returns the status \"Deprovisioned\". This indicates that the tenant is scheduled for  deprovisioning, which may take several days to complete.
         * @summary Deprovision an analytic tenant
         * @param {TenantManagementV1ApiDeleteTenantRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTenant(requestParameters: TenantManagementV1ApiDeleteTenantRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TenantStatusAPIDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteTenant(requestParameters.tenantId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use this API to disable an analytic tenant and remove access to Visier visualizations for the tenant\'s users.   You must disable an analytic tenant before deprovisioning, or removing, it from the system.
         * @summary Disable an analytic tenant
         * @param {TenantManagementV1ApiDisableTenantRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async disableTenant(requestParameters: TenantManagementV1ApiDisableTenantRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TenantStatusAPIDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.disableTenant(requestParameters.tenantId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * An analytic tenant is enabled when you provision or create the tenant.   Use this API to enable a tenant that you have specifically disabled; for example, if you previously did not  want that tenant to have access to Visier visualizations, but now do.
         * @summary Enable an analytic tenant
         * @param {TenantManagementV1ApiEnableTenantRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async enableTenant(requestParameters: TenantManagementV1ApiEnableTenantRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TenantStatusAPIDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.enableTenant(requestParameters.tenantId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use this API to retrieve all details for a specified analytic tenant. Doing so allows you to see the current state  of the tenant, the content modules assigned to it, and all other relevant details for the tenant.
         * @summary Retrieve an analytic tenant\'s details
         * @param {TenantManagementV1ApiGetTenantRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTenant(requestParameters: TenantManagementV1ApiGetTenantRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TenantDetailAPIDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTenant(requestParameters.tenantId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use this API to retrieve the full list of analytic tenants managed by you with their current states and the  content modules assigned to them, and all other relevant details for the tenants if requested.
         * @summary Retrieve a list of all analytic tenants
         * @param {TenantManagementV1ApiGetTenantsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTenants(requestParameters: TenantManagementV1ApiGetTenantsRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AllTenantsStatusAPIDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTenants(requestParameters.limit, requestParameters.start, requestParameters.details, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * You may need to update analytic tenants as they grow and as your organization upgrades the content available to  them. You may also encounter a scenario where an analytic tenant transitions across different industries.   To ensure that the analytic tenant receives accurate benchmarks and predictive functionality, update their  industry code in the Visier system.   You can use this API to update any field on an analytic tenant, except tenantCode.
         * @summary Update an analytic tenant
         * @param {TenantManagementV1ApiUpdateTenantRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateTenant(requestParameters: TenantManagementV1ApiUpdateTenantRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TenantProvisionAPIDTO>> {
            const updateTenantModel: UpdateTenantModel = {
                tenantDisplayName: requestParameters.tenantDisplayName,
                industryCode: requestParameters.industryCode,
                purchasedModules: requestParameters.purchasedModules,
                embeddableDomains: requestParameters.embeddableDomains,
                customProperties: requestParameters.customProperties,
                ssoInstanceIssuers: requestParameters.ssoInstanceIssuers
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateTenant(updateTenantModel, requestParameters.tenantId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use this API to retrieve the metric values for an individual analytic tenant. The metric values included in the  response are the tenant\'s configured summary metrics. Administrators can configure summary metrics in a project:  - Sign in to Visier as an administrator.  - In a project, on the navigation bar, click the Home button.  - Click Dashboard, and then click Edit Summary Metrics.  - Select the metrics that you want to validate, and then close the Summary Metrics dialog.  - Publish the project to production.
         * @summary Validate an analytic tenant\'s metric values
         * @param {TenantManagementV1ApiValidateTenantRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async validateTenant(requestParameters: TenantManagementV1ApiValidateTenantRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TenantPreviewEntriesSummaryDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.validateTenant(requestParameters.tenantId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * As you onboard more analytic tenants, you can validate the data visible to your users to ensure it matches the  source systems from which it was exported and that it matches what your expectations are for this data.   The metric values included in the response are the tenant\'s configured summary metrics. Administrators can  configure summary metrics in a project:  - Sign in to Visier as an administrator.  - In a project, on the navigation bar, click the Home button.  - Click Dashboard, and then click Edit Summary Metrics.  - Select the metrics that you want to validate, and then close the Summary Metrics dialog.  - Publish the project to production.
         * @summary Validate metric values for all analytic tenants
         * @param {TenantManagementV1ApiValidateTenantsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async validateTenants(requestParameters: TenantManagementV1ApiValidateTenantsRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TenantPreviewEntriesSummaryListDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.validateTenants(requestParameters.limit, requestParameters.start, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TenantManagementV1Api - factory interface
 * @export
 */
export const TenantManagementV1ApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TenantManagementV1ApiFp(configuration)
    return {
        /**
         * Prior to processing and loading an analytic tenant\'s data files, you must provision, or create, that tenant.  A provisioned analytic tenant is automatically enabled. If the tenant\'s data is loaded after provisioning, that  data is immediately accessible by their users.   This API allows you to create an analytic tenant and identify the applications assigned to the tenant. Visier  organizes content under a set of modules.   Contact Visier Support to determine the list of modules allocated to you.
         * @summary Add an analytic tenant
         * @param {TenantManagementV1ApiAddTenantRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addTenant(requestParameters: TenantManagementV1ApiAddTenantRequest, options?: AxiosRequestConfig): AxiosPromise<TenantProvisionAPIDTO> {
            return localVarFp.addTenant(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Warning! Deprovisioning an analytic tenant is not reversible.  Before deprovisioning, you must disable an analytic tenant. For more information, see **`/v1/admin/tenants/:tenantId/disable`**.   This API removes an analytic tenant permanently from the Visier system. If you are unsure whether an analytic tenant  may be re-enabled on any of the Visier modules at any time, you may instead want to disable the analytic tenant.   If successful, the response returns the status \"Deprovisioned\". This indicates that the tenant is scheduled for  deprovisioning, which may take several days to complete.
         * @summary Deprovision an analytic tenant
         * @param {TenantManagementV1ApiDeleteTenantRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTenant(requestParameters: TenantManagementV1ApiDeleteTenantRequest = {}, options?: AxiosRequestConfig): AxiosPromise<TenantStatusAPIDTO> {
            return localVarFp.deleteTenant(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this API to disable an analytic tenant and remove access to Visier visualizations for the tenant\'s users.   You must disable an analytic tenant before deprovisioning, or removing, it from the system.
         * @summary Disable an analytic tenant
         * @param {TenantManagementV1ApiDisableTenantRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        disableTenant(requestParameters: TenantManagementV1ApiDisableTenantRequest = {}, options?: AxiosRequestConfig): AxiosPromise<TenantStatusAPIDTO> {
            return localVarFp.disableTenant(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * An analytic tenant is enabled when you provision or create the tenant.   Use this API to enable a tenant that you have specifically disabled; for example, if you previously did not  want that tenant to have access to Visier visualizations, but now do.
         * @summary Enable an analytic tenant
         * @param {TenantManagementV1ApiEnableTenantRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        enableTenant(requestParameters: TenantManagementV1ApiEnableTenantRequest = {}, options?: AxiosRequestConfig): AxiosPromise<TenantStatusAPIDTO> {
            return localVarFp.enableTenant(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this API to retrieve all details for a specified analytic tenant. Doing so allows you to see the current state  of the tenant, the content modules assigned to it, and all other relevant details for the tenant.
         * @summary Retrieve an analytic tenant\'s details
         * @param {TenantManagementV1ApiGetTenantRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTenant(requestParameters: TenantManagementV1ApiGetTenantRequest = {}, options?: AxiosRequestConfig): AxiosPromise<TenantDetailAPIDTO> {
            return localVarFp.getTenant(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this API to retrieve the full list of analytic tenants managed by you with their current states and the  content modules assigned to them, and all other relevant details for the tenants if requested.
         * @summary Retrieve a list of all analytic tenants
         * @param {TenantManagementV1ApiGetTenantsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTenants(requestParameters: TenantManagementV1ApiGetTenantsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<AllTenantsStatusAPIDTO> {
            return localVarFp.getTenants(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * You may need to update analytic tenants as they grow and as your organization upgrades the content available to  them. You may also encounter a scenario where an analytic tenant transitions across different industries.   To ensure that the analytic tenant receives accurate benchmarks and predictive functionality, update their  industry code in the Visier system.   You can use this API to update any field on an analytic tenant, except tenantCode.
         * @summary Update an analytic tenant
         * @param {TenantManagementV1ApiUpdateTenantRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTenant(requestParameters: TenantManagementV1ApiUpdateTenantRequest, options?: AxiosRequestConfig): AxiosPromise<TenantProvisionAPIDTO> {
            return localVarFp.updateTenant(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this API to retrieve the metric values for an individual analytic tenant. The metric values included in the  response are the tenant\'s configured summary metrics. Administrators can configure summary metrics in a project:  - Sign in to Visier as an administrator.  - In a project, on the navigation bar, click the Home button.  - Click Dashboard, and then click Edit Summary Metrics.  - Select the metrics that you want to validate, and then close the Summary Metrics dialog.  - Publish the project to production.
         * @summary Validate an analytic tenant\'s metric values
         * @param {TenantManagementV1ApiValidateTenantRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validateTenant(requestParameters: TenantManagementV1ApiValidateTenantRequest = {}, options?: AxiosRequestConfig): AxiosPromise<TenantPreviewEntriesSummaryDTO> {
            return localVarFp.validateTenant(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * As you onboard more analytic tenants, you can validate the data visible to your users to ensure it matches the  source systems from which it was exported and that it matches what your expectations are for this data.   The metric values included in the response are the tenant\'s configured summary metrics. Administrators can  configure summary metrics in a project:  - Sign in to Visier as an administrator.  - In a project, on the navigation bar, click the Home button.  - Click Dashboard, and then click Edit Summary Metrics.  - Select the metrics that you want to validate, and then close the Summary Metrics dialog.  - Publish the project to production.
         * @summary Validate metric values for all analytic tenants
         * @param {TenantManagementV1ApiValidateTenantsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validateTenants(requestParameters: TenantManagementV1ApiValidateTenantsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<TenantPreviewEntriesSummaryListDTO> {
            return localVarFp.validateTenants(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addTenant operation in TenantManagementV1Api.
 * @export
 * @interface TenantManagementV1ApiAddTenantRequest
 */
export type TenantManagementV1ApiAddTenantRequest = {
    
} & TenantProvisionAPIDTO

/**
 * Request parameters for deleteTenant operation in TenantManagementV1Api.
 * @export
 * @interface TenantManagementV1ApiDeleteTenantRequest
 */
export type TenantManagementV1ApiDeleteTenantRequest = {
    
    /**
    * The ID of the tenant. For example, WFF_{XXX}~{YYY} where {XXX} is the administrating tenant code and {YYY}  is the analytic tenant code.
    * @type {string}
    * @memberof TenantManagementV1ApiDeleteTenant
    */
    readonly tenantId?: string
    
}

/**
 * Request parameters for disableTenant operation in TenantManagementV1Api.
 * @export
 * @interface TenantManagementV1ApiDisableTenantRequest
 */
export type TenantManagementV1ApiDisableTenantRequest = {
    
    /**
    * The ID of the tenant. For example, WFF_{XXX}~{YYY} where {XXX} is the administrating tenant code and {YYY}  is the analytic tenant code.
    * @type {string}
    * @memberof TenantManagementV1ApiDisableTenant
    */
    readonly tenantId?: string
    
}

/**
 * Request parameters for enableTenant operation in TenantManagementV1Api.
 * @export
 * @interface TenantManagementV1ApiEnableTenantRequest
 */
export type TenantManagementV1ApiEnableTenantRequest = {
    
    /**
    * The ID of the tenant. For example, WFF_{XXX}~{YYY} where {XXX} is the administrating tenant code and {YYY}  is the analytic tenant code.
    * @type {string}
    * @memberof TenantManagementV1ApiEnableTenant
    */
    readonly tenantId?: string
    
}

/**
 * Request parameters for getTenant operation in TenantManagementV1Api.
 * @export
 * @interface TenantManagementV1ApiGetTenantRequest
 */
export type TenantManagementV1ApiGetTenantRequest = {
    
    /**
    * The ID of the tenant. For example, WFF_{XXX}~{YYY} where {XXX} is the administrating tenant code and {YYY}  is the analytic tenant code.
    * @type {string}
    * @memberof TenantManagementV1ApiGetTenant
    */
    readonly tenantId?: string
    
}

/**
 * Request parameters for getTenants operation in TenantManagementV1Api.
 * @export
 * @interface TenantManagementV1ApiGetTenantsRequest
 */
export type TenantManagementV1ApiGetTenantsRequest = {
    
    /**
    * The limit of analytic tenant details to retrieve.
    * @type {number}
    * @memberof TenantManagementV1ApiGetTenants
    */
    readonly limit?: number
    
    /**
    * The index to start retrieving results from, also known as offset. The index begins at 0.
    * @type {number}
    * @memberof TenantManagementV1ApiGetTenants
    */
    readonly start?: number
    
    /**
    * If true, the response returns information about the data version and modules.
    * @type {boolean}
    * @memberof TenantManagementV1ApiGetTenants
    */
    readonly details?: boolean
    
}

/**
 * Request parameters for updateTenant operation in TenantManagementV1Api.
 * @export
 * @interface TenantManagementV1ApiUpdateTenantRequest
 */
export type TenantManagementV1ApiUpdateTenantRequest = {
    
    /**
    * The ID of the tenant to update.
    * @type {string}
    * @memberof TenantManagementV1ApiUpdateTenant
    */
    readonly tenantId?: string
    
} & UpdateTenantModel

/**
 * Request parameters for validateTenant operation in TenantManagementV1Api.
 * @export
 * @interface TenantManagementV1ApiValidateTenantRequest
 */
export type TenantManagementV1ApiValidateTenantRequest = {
    
    /**
    * The ID of the tenant. For example, WFF_{XXX}~{YYY} where {XXX} is the administrating tenant code and {YYY}  is the analytic tenant code.
    * @type {string}
    * @memberof TenantManagementV1ApiValidateTenant
    */
    readonly tenantId?: string
    
}

/**
 * Request parameters for validateTenants operation in TenantManagementV1Api.
 * @export
 * @interface TenantManagementV1ApiValidateTenantsRequest
 */
export type TenantManagementV1ApiValidateTenantsRequest = {
    
    /**
    * The limit of analytic tenant details to retrieve.
    * @type {number}
    * @memberof TenantManagementV1ApiValidateTenants
    */
    readonly limit?: number
    
    /**
    * The index to start retrieving results from, also known as offset. The index begins at 0.
    * @type {number}
    * @memberof TenantManagementV1ApiValidateTenants
    */
    readonly start?: number
    
}

/**
 * TenantManagementV1ApiGenerated - object-oriented interface
 * @export
 * @class TenantManagementV1ApiGenerated
 * @extends {BaseAPI}
 */
export class TenantManagementV1ApiGenerated extends BaseAPI {
    /**
     * Prior to processing and loading an analytic tenant\'s data files, you must provision, or create, that tenant.  A provisioned analytic tenant is automatically enabled. If the tenant\'s data is loaded after provisioning, that  data is immediately accessible by their users.   This API allows you to create an analytic tenant and identify the applications assigned to the tenant. Visier  organizes content under a set of modules.   Contact Visier Support to determine the list of modules allocated to you.
     * @summary Add an analytic tenant
     * @param {TenantManagementV1ApiAddTenantRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantManagementV1ApiGenerated
     */
    public addTenant(requestParameters: TenantManagementV1ApiAddTenantRequest, options?: AxiosRequestConfig) {
        return TenantManagementV1ApiFp(this.configuration).addTenant(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Warning! Deprovisioning an analytic tenant is not reversible.  Before deprovisioning, you must disable an analytic tenant. For more information, see **`/v1/admin/tenants/:tenantId/disable`**.   This API removes an analytic tenant permanently from the Visier system. If you are unsure whether an analytic tenant  may be re-enabled on any of the Visier modules at any time, you may instead want to disable the analytic tenant.   If successful, the response returns the status \"Deprovisioned\". This indicates that the tenant is scheduled for  deprovisioning, which may take several days to complete.
     * @summary Deprovision an analytic tenant
     * @param {TenantManagementV1ApiDeleteTenantRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantManagementV1ApiGenerated
     */
    public deleteTenant(requestParameters: TenantManagementV1ApiDeleteTenantRequest = {}, options?: AxiosRequestConfig) {
        return TenantManagementV1ApiFp(this.configuration).deleteTenant(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this API to disable an analytic tenant and remove access to Visier visualizations for the tenant\'s users.   You must disable an analytic tenant before deprovisioning, or removing, it from the system.
     * @summary Disable an analytic tenant
     * @param {TenantManagementV1ApiDisableTenantRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantManagementV1ApiGenerated
     */
    public disableTenant(requestParameters: TenantManagementV1ApiDisableTenantRequest = {}, options?: AxiosRequestConfig) {
        return TenantManagementV1ApiFp(this.configuration).disableTenant(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * An analytic tenant is enabled when you provision or create the tenant.   Use this API to enable a tenant that you have specifically disabled; for example, if you previously did not  want that tenant to have access to Visier visualizations, but now do.
     * @summary Enable an analytic tenant
     * @param {TenantManagementV1ApiEnableTenantRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantManagementV1ApiGenerated
     */
    public enableTenant(requestParameters: TenantManagementV1ApiEnableTenantRequest = {}, options?: AxiosRequestConfig) {
        return TenantManagementV1ApiFp(this.configuration).enableTenant(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this API to retrieve all details for a specified analytic tenant. Doing so allows you to see the current state  of the tenant, the content modules assigned to it, and all other relevant details for the tenant.
     * @summary Retrieve an analytic tenant\'s details
     * @param {TenantManagementV1ApiGetTenantRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantManagementV1ApiGenerated
     */
    public getTenant(requestParameters: TenantManagementV1ApiGetTenantRequest = {}, options?: AxiosRequestConfig) {
        return TenantManagementV1ApiFp(this.configuration).getTenant(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this API to retrieve the full list of analytic tenants managed by you with their current states and the  content modules assigned to them, and all other relevant details for the tenants if requested.
     * @summary Retrieve a list of all analytic tenants
     * @param {TenantManagementV1ApiGetTenantsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantManagementV1ApiGenerated
     */
    public getTenants(requestParameters: TenantManagementV1ApiGetTenantsRequest = {}, options?: AxiosRequestConfig) {
        return TenantManagementV1ApiFp(this.configuration).getTenants(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * You may need to update analytic tenants as they grow and as your organization upgrades the content available to  them. You may also encounter a scenario where an analytic tenant transitions across different industries.   To ensure that the analytic tenant receives accurate benchmarks and predictive functionality, update their  industry code in the Visier system.   You can use this API to update any field on an analytic tenant, except tenantCode.
     * @summary Update an analytic tenant
     * @param {TenantManagementV1ApiUpdateTenantRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantManagementV1ApiGenerated
     */
    public updateTenant(requestParameters: TenantManagementV1ApiUpdateTenantRequest, options?: AxiosRequestConfig) {
        return TenantManagementV1ApiFp(this.configuration).updateTenant(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this API to retrieve the metric values for an individual analytic tenant. The metric values included in the  response are the tenant\'s configured summary metrics. Administrators can configure summary metrics in a project:  - Sign in to Visier as an administrator.  - In a project, on the navigation bar, click the Home button.  - Click Dashboard, and then click Edit Summary Metrics.  - Select the metrics that you want to validate, and then close the Summary Metrics dialog.  - Publish the project to production.
     * @summary Validate an analytic tenant\'s metric values
     * @param {TenantManagementV1ApiValidateTenantRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantManagementV1ApiGenerated
     */
    public validateTenant(requestParameters: TenantManagementV1ApiValidateTenantRequest = {}, options?: AxiosRequestConfig) {
        return TenantManagementV1ApiFp(this.configuration).validateTenant(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * As you onboard more analytic tenants, you can validate the data visible to your users to ensure it matches the  source systems from which it was exported and that it matches what your expectations are for this data.   The metric values included in the response are the tenant\'s configured summary metrics. Administrators can  configure summary metrics in a project:  - Sign in to Visier as an administrator.  - In a project, on the navigation bar, click the Home button.  - Click Dashboard, and then click Edit Summary Metrics.  - Select the metrics that you want to validate, and then close the Summary Metrics dialog.  - Publish the project to production.
     * @summary Validate metric values for all analytic tenants
     * @param {TenantManagementV1ApiValidateTenantsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantManagementV1ApiGenerated
     */
    public validateTenants(requestParameters: TenantManagementV1ApiValidateTenantsRequest = {}, options?: AxiosRequestConfig) {
        return TenantManagementV1ApiFp(this.configuration).validateTenants(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
